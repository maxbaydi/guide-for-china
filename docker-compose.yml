services:
  # PostgreSQL with pg_jieba extension
  postgres:
    build:
      context: ./infrastructure/postgres
      dockerfile: Dockerfile
    container_name: guide-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chinese_guide}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - guide-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: guide-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - guide-network
    command: redis-server --appendonly yes

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    container_name: guide-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - guide-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: guide-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - guide-network

  # User Service
  user-service:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    container_name: guide-user-service
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-chinese_guide}
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production-super-secret-key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change-me-in-production-refresh-secret}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      PORT: 4002
      NODE_ENV: ${NODE_ENV:-development}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      DICTIONARY_SERVICE_HOST: ${DICTIONARY_SERVICE_HOST:-dictionary-service}
      DICTIONARY_SERVICE_PORT: ${DICTIONARY_SERVICE_PORT:-4001}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "4002:4002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      dictionary-service:
        condition: service_started
    networks:
      - guide-network
    restart: unless-stopped

  # Dictionary Service
  dictionary-service:
    build:
      context: ./services/dictionary
      dockerfile: Dockerfile
    container_name: guide-dictionary-service
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-chinese_guide}
      PORT: 4001
      NODE_ENV: ${NODE_ENV:-development}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "4001:4001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - guide-network
    restart: unless-stopped

  # TTS Service
  tts-service:
    build:
      context: ./services/tts
      dockerfile: Dockerfile
    container_name: guide-tts-service
    environment:
      PORT: 4003
      NODE_ENV: ${NODE_ENV:-development}
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_BUCKET: tts-audio
      MINIO_PUBLIC_URL: ${MINIO_PUBLIC_URL:-http://localhost:9000}
    ports:
      - "4003:4003"
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - guide-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: guide-api-gateway
    environment:
      PORT: 4000
      NODE_ENV: ${NODE_ENV:-development}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      USER_SERVICE_URL: ${USER_SERVICE_URL:-http://user-service:4002/graphql}
      DICTIONARY_SERVICE_URL: ${DICTIONARY_SERVICE_URL:-http://dictionary-service:4001/}
      TTS_SERVICE_URL: ${TTS_SERVICE_URL:-http://tts-service:4003}
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production-super-secret-key}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change-me-in-production-refresh-secret}
    ports:
      - "4000:4000"
    depends_on:
      redis:
        condition: service_healthy
      user-service:
        condition: service_started
      dictionary-service:
        condition: service_started
      tts-service:
        condition: service_started
    networks:
      - guide-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  guide-network:
    driver: bridge

