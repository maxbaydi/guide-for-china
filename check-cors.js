#!/usr/bin/env node

const http = require('http');

const tests = [
    {
        name: 'Health endpoint',
        hostname: '81.177.136.22',
        port: 4000,
        path: '/health',
        method: 'GET'
    },
    {
        name: 'Auth register (OPTIONS preflight)',
        hostname: '81.177.136.22',
        port: 4000,
        path: '/api/v1/auth/register',
        method: 'OPTIONS',
        headers: {
            'Origin': 'http://localhost:8080',
            'Access-Control-Request-Method': 'POST',
            'Access-Control-Request-Headers': 'Content-Type'
        }
    },
    {
        name: 'Auth register (POST)',
        hostname: '81.177.136.22',
        port: 4000,
        path: '/api/v1/auth/register',
        method: 'POST',
        headers: {
            'Origin': 'http://localhost:8080',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email: 'test@test.com', password: 'password123' })
    },
    {
        name: 'GraphQL endpoint',
        hostname: '81.177.136.22',
        port: 4002,
        path: '/graphql',
        method: 'OPTIONS',
        headers: {
            'Origin': 'http://localhost:8080',
            'Access-Control-Request-Method': 'POST',
            'Access-Control-Request-Headers': 'Content-Type'
        }
    }
];

console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä–µ\n');
console.log('‚ïê'.repeat(80));

let completed = 0;

tests.forEach((test, index) => {
    setTimeout(() => {
        const options = {
            hostname: test.hostname,
            port: test.port,
            path: test.path,
            method: test.method,
            headers: test.headers || {
                'Origin': 'http://localhost:8080'
            },
            timeout: 5000
        };

        const req = http.request(options, (res) => {
            console.log(`\n‚úÖ ${test.name}`);
            console.log(`   Status: ${res.statusCode} ${res.statusMessage}`);
            console.log(`   CORS Headers:`);
            
            const corsHeaders = [
                'access-control-allow-origin',
                'access-control-allow-methods',
                'access-control-allow-headers',
                'access-control-allow-credentials'
            ];

            corsHeaders.forEach(header => {
                const value = res.headers[header];
                if (value) {
                    console.log(`     ${header}: ${value}`);
                } else {
                    console.log(`     ${header}: [–û–¢–°–£–¢–°–¢–í–£–ï–¢]`);
                }
            });

            completed++;
            if (completed === tests.length) {
                console.log('\n' + '‚ïê'.repeat(80));
                console.log('\nüìã –í—ã–≤–æ–¥:\n');
                analyzeCORS();
            }
        });

        req.on('error', (error) => {
            console.log(`\n‚ùå ${test.name}`);
            console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
            
            completed++;
            if (completed === tests.length) {
                console.log('\n' + '‚ïê'.repeat(80));
                console.log('\nüìã –í—ã–≤–æ–¥:\n');
                analyzeCORS();
            }
        });

        req.on('timeout', () => {
            req.destroy();
            console.log(`\n‚è±Ô∏è ${test.name}`);
            console.log(`   Timeout: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 5 —Å–µ–∫—É–Ω–¥`);
            
            completed++;
            if (completed === tests.length) {
                console.log('\n' + '‚ïê'.repeat(80));
                console.log('\nüìã –í—ã–≤–æ–¥:\n');
                analyzeCORS();
            }
        });

        if (test.body) {
            req.write(test.body);
        }

        req.end();
    }, index * 1000);
});

function analyzeCORS() {
    console.log('1. –ï—Å–ª–∏ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç');
    console.log('   "access-control-allow-origin", —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    console.log('   —Å–µ—Ä–≤–µ—Ä–∞.\n');
    
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è CORS_ORIGIN:');
    console.log('   - –ù–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ: –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å http://localhost:8080');
    console.log('   - –ù–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "*"\n');
    
    console.log('3. –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('   - –ó–∞–ø—É—â–µ–Ω—ã –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker-compose ps');
    console.log('   - –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä: telnet 81.177.136.22 4000\n');
}


