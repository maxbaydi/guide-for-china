import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from './prisma.service';
import { RedisService } from '../redis/redis.service';
import { SearchService } from './search.service';
import { Character } from '../entities/character.entity';
import { Phrase } from '../entities/phrase.entity';
import { CharacterAnalysis } from '../entities/character-analysis.entity';

@Injectable()
export class DictionaryService {
  private readonly logger = new Logger(DictionaryService.name);

  constructor(
    private prisma: PrismaService,
    private redisService: RedisService,
    private searchService: SearchService,
  ) {}

  /**
   * –ü–æ–∏—Å–∫ –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –≤–≤–æ–¥–∞ (–∫–∏—Ç–∞–π—Å–∫–∏–π/–ø–∏–Ω—å–∏–Ω/—Ä—É—Å—Å–∫–∏–π)
   * –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞
   * 
   * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç search_enhanced_v2 —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ definitions,
   * –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ examples (lazy loading)
   */
  async searchCharacters(query: string, limit: number = 20): Promise<Character[]> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π –∫–ª—é—á–∞
    const cacheKey = `search:v2:${query}:${limit}`;
    const cached = await this.redisService.getCachedSearchResults(cacheKey);
    if (cached) {
      this.logger.log(`‚úÖ Cache hit for search: ${query}`);
      return cached;
    }

    this.logger.log(`‚ùå Cache miss for search: ${query}, querying database`);
    const startTime = Date.now();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–æ–∏—Å–∫ - –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    const inputType = this.detectInputType(query);
    const normalizedQuery = this.normalizeQuery(query, inputType);
    const searchResults = await this.searchService.executeSearchOptimized(
      normalizedQuery,
      inputType,
      limit,
    );
    
    if (searchResults.length === 0) {
      this.logger.log(`No results found for query: ${query}`);
      return [];
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Character
    // –¢–µ–ø–µ—Ä—å –ù–ï–¢ N+1 –ø—Ä–æ–±–ª–µ–º—ã - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!
    const characters = searchResults.map((result) => ({
      id: result.id,
      simplified: result.simplified,
      traditional: result.traditional,
      pinyin: result.pinyin,
      hskLevel: result.hsk_level,
      frequency: result.frequency,
      definitions: result.definitions || [], // –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î
      examples: [], // –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º lazy loading
      createdAt: new Date(),
      updatedAt: new Date(),
    } as Character));

    const duration = Date.now() - startTime;
    this.logger.log(
      `üöÄ Search completed in ${duration}ms: "${query}" (${characters.length} results)`,
    );

    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç (1800 —Å–µ–∫—É–Ω–¥) –≤–º–µ—Å—Ç–æ 5
    await this.redisService.cacheSearchResults(cacheKey, characters, 1800);
    
    return characters;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–≤–æ–¥–∞
   */
  private detectInputType(query: string): any {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ utils
    const { detectInputType } = require('../utils/input-detector');
    return detectInputType(query);
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   */
  private normalizeQuery(query: string, inputType: any): string {
    const {
      normalizeQuery,
      normalizePinyin,
      normalizeRussian,
      normalizeChinese,
    } = require('../utils/text-normalizer');
    
    switch (inputType) {
      case 'CHINESE':
        return normalizeChinese(query);
      case 'PINYIN':
        return normalizePinyin(query);
      case 'RUSSIAN':
        return normalizeRussian(query);
      default:
        return normalizeQuery(query);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–µ—Ä–æ–≥–ª–∏—Ñ –ø–æ ID
   * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ definitions
   * Examples –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ getCharacterExamples()
   */
  async getCharacter(id: string): Promise<Character | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = await this.redisService.getCachedCharacter(id);
    if (cached) {
      this.logger.log(`‚úÖ Cache hit for character: ${id}`);
      return cached;
    }

    this.logger.log(`‚ùå Cache miss for character: ${id}, querying database`);
    const character = await this.prisma.character.findUnique({
      where: { id },
      include: {
        definitions: {
          orderBy: { order: 'asc' },
          take: 20, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        },
        // –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º examples - –∏—Å–ø–æ–ª—å–∑—É–µ–º lazy loading
      },
    });
    
    if (character) {
      this.logger.log(`Character found: ${character.simplified} (${character.id})`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ examples –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const characterWithEmptyExamples = {
        ...character,
        examples: [],
      };
      
      // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 1 —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
      await this.redisService.cacheCharacter(id, characterWithEmptyExamples, 3600);
      
      return characterWithEmptyExamples as Character;
    } else {
      this.logger.warn(`Character not found with id: ${id}`);
    }
    
    return null;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ (lazy loading)
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞
   */
  async getCharacterExamples(characterId: string, limit: number = 20): Promise<any[]> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø—Ä–∏–º–µ—Ä–æ–≤
    const cacheKey = `examples:${characterId}:${limit}`;
    const cached = await this.redisService.get(cacheKey);
    if (cached) {
      this.logger.log(`‚úÖ Cache hit for examples: ${characterId}`);
      return JSON.parse(cached);
    }

    this.logger.log(`‚ùå Cache miss for examples: ${characterId}, querying database`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–∏–≥—Ä–∞—Ü–∏–∏ 008
    const examples = await this.searchService.getCharacterExamples(characterId, limit);
    
    // –ö–µ—à–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ 1 —á–∞—Å
    await this.redisService.set(cacheKey, JSON.stringify(examples), 3600);
    
    return examples;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–µ—Ä–æ–≥–ª–∏—Ñ –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –Ω–∞–ø–∏—Å–∞–Ω–∏—é
   */
  async getCharacterBySimplified(simplified: string): Promise<Character | null> {
    const character = await this.prisma.character.findFirst({
      where: { simplified },
      include: {
        definitions: {
          orderBy: { order: 'asc' },
          take: 20, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        },
        examples: {
          take: 20, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –ø—Ä–∏–º–µ—Ä–æ–≤
          orderBy: {
            createdAt: 'desc', // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
          },
        },
      },
    });
    
    return character as Character;
  }

  /**
   * –ü–æ–∏—Å–∫ —Ñ—Ä–∞–∑ –ø–æ —Ä—É—Å—Å–∫–æ–º—É –∏–ª–∏ –∫–∏—Ç–∞–π—Å–∫–æ–º—É —Ç–µ–∫—Å—Ç—É
   */
  async searchPhrases(query: string, limit: number = 20): Promise<Phrase[]> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = await this.redisService.getCachedPhraseSearchResults(`${query}:${limit}`);
    if (cached) {
      this.logger.log(`Cache hit for phrase search: ${query}`);
      return cached;
    }

    this.logger.log(`Cache miss for phrase search: ${query}, querying database`);
    const phrases = await this.prisma.phrase.findMany({
      where: {
        OR: [
          { russian: { contains: query, mode: 'insensitive' } },
          { chinese: { contains: query } },
        ],
      },
      take: limit,
      orderBy: { createdAt: 'desc' },
    });
    
    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
    await this.redisService.cachePhraseSearchResults(`${query}:${limit}`, phrases, 300);
    
    return phrases as Phrase[];
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ - —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è N+1 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async analyzeText(text: string): Promise<CharacterAnalysis[]> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = await this.redisService.getCachedAnalysisResults(text);
    if (cached) {
      this.logger.log(`Cache hit for text analysis: ${text.substring(0, 20)}...`);
      return cached;
    }

    this.logger.log(`Cache miss for text analysis, processing: ${text.substring(0, 20)}...`);
    const characters = text.split('');
    
    // –®–∞–≥ 1: –°–æ–±—Ä–∞—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const uniqueChineseChars = new Set<string>();
    for (const char of characters) {
      if (this.isChineseCharacter(char)) {
        uniqueChineseChars.add(char);
      }
    }

    // –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω –º–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤
    // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º examples –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã –≤ UI –∞–Ω–∞–ª–∏–∑–∞
    const uniqueCharsArray = Array.from(uniqueChineseChars);
    this.logger.log(`Fetching ${uniqueCharsArray.length} unique characters from database`);
    
    const characterRecords = await this.prisma.character.findMany({
      where: {
        simplified: {
          in: uniqueCharsArray,
        },
      },
      include: {
        definitions: {
          orderBy: { order: 'asc' },
          take: 20, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        },
      },
    });

    // –®–∞–≥ 3: –°–æ–∑–¥–∞—Ç—å Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ O(1)
    const characterMap = new Map<string, Character>();
    for (const char of characterRecords) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ examples, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      characterMap.set(char.simplified, { ...char, examples: [] } as Character);
    }

    // –®–∞–≥ 4: –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑—É—è Map
    const analysis: CharacterAnalysis[] = [];
    for (let i = 0; i < characters.length; i++) {
      const char = characters[i];
      
      if (this.isChineseCharacter(char)) {
        const details = characterMap.get(char);
        
        analysis.push({
          character: char,
          details: details || undefined,
          position: i,
        });
      }
    }

    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç (1800 —Å–µ–∫—É–Ω–¥)
    await this.redisService.cacheAnalysisResults(text, analysis, 1800);

    return analysis;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –∫–∏—Ç–∞–π—Å–∫–∏–º –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–º
   */
  private isChineseCharacter(char: string): boolean {
    const code = char.charCodeAt(0);
    return (
      (code >= 0x4e00 && code <= 0x9fff) || // –û—Å–Ω–æ–≤–Ω—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
      (code >= 0x3400 && code <= 0x4dbf) || // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ A
      (code >= 0x20000 && code <= 0x2a6df) || // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ B
      (code >= 0x2a700 && code <= 0x2b73f) || // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ C
      (code >= 0x2b740 && code <= 0x2b81f) || // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ D
      (code >= 0x2b820 && code <= 0x2ceaf) // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ E
    );
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤–∞—Ä—è
   */
  async getStatistics() {
    const [characterCount, definitionCount, exampleCount, phraseCount] = await Promise.all([
      this.prisma.character.count(),
      this.prisma.definition.count(),
      this.prisma.example.count(),
      this.prisma.phrase.count(),
    ]);

    return {
      characters: characterCount,
      definitions: definitionCount,
      examples: exampleCount,
      phrases: phraseCount,
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Å–ª–æ–≤–∞
   * –ü–æ–∏—Å–∫ —Å–ª–æ–≤ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å –¥–∞–Ω–Ω–æ–≥–æ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –µ–≥–æ
   */
  async getSimilarWords(simplified: string, limit: number = 20): Promise<any[]> {
    try {
      // –ü–æ–∏—Å–∫ —Å–ª–æ–≤ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –µ–≥–æ
      const similarChars = await this.prisma.character.findMany({
        where: {
          OR: [
            { simplified: { startsWith: simplified } },
            { simplified: { contains: simplified } },
          ],
          NOT: {
            simplified: simplified, // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º –∏–µ—Ä–æ–≥–ª–∏—Ñ
          },
        },
        include: {
          definitions: {
            orderBy: { order: 'asc' },
            take: 1, // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
          },
        },
        take: limit,
        orderBy: [
          // –°–Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–∞ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞
          { simplified: 'asc' },
        ],
      });

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å mainTranslation
      return similarChars.map((char) => ({
        id: char.id,
        simplified: char.simplified,
        pinyin: char.pinyin || '',
        mainTranslation: char.definitions[0]?.translation || '–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞',
      }));
    } catch (error) {
      this.logger.error(`Error fetching similar words for ${simplified}:`, error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
   * –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ phrases, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
   */
  async getReverseTranslations(simplified: string, limit: number = 20): Promise<any[]> {
    try {
      const phrases = await this.prisma.phrase.findMany({
        where: {
          chinese: {
            contains: simplified,
          },
        },
        take: limit,
        orderBy: {
          createdAt: 'desc',
        },
      });

      return phrases.map((phrase) => ({
        russian: phrase.russian,
        chinese: phrase.chinese,
        pinyin: phrase.pinyin,
      }));
    } catch (error) {
      this.logger.error(`Error fetching reverse translations for ${simplified}:`, error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –¥–Ω—è
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞—Ç—É –∫–∞–∫ seed –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
   */
  async getWordOfTheDay(): Promise<Character | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = await this.redisService.getCachedWordOfTheDay();
    if (cached) {
      this.logger.log('Cache hit for word of the day');
      return cached;
    }

    this.logger.log('Cache miss for word of the day, generating new one');
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ seed
    const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    const seed = today.split('-').reduce((acc, val) => acc + parseInt(val), 0);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–µ—Ä–æ–≥–ª–∏—Ñ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞ –æ–±—É—á–µ–Ω–∏—è
    const characters = await this.prisma.$queryRaw<any[]>`
      SELECT c.id, c.simplified, c.traditional, c.pinyin, c."hskLevel", c.frequency, c."createdAt", c."updatedAt"
      FROM characters c
      INNER JOIN definitions d ON c.id = d."characterId"
      WHERE d.translation IS NOT NULL
        AND LENGTH(c.simplified) = 1
      ORDER BY md5(c.simplified || ${seed}::text)
      LIMIT 1
    `;
    
    if (!characters || characters.length === 0) {
      // Fallback: –ø—Ä–æ—Å—Ç–æ –ª—é–±–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ
      this.logger.warn('No characters with definitions found, using fallback');
      const fallback = await this.prisma.character.findFirst({
        where: {
          definitions: {
            some: {},
          },
        },
        include: {
          definitions: {
            orderBy: { order: 'asc' },
            take: 20, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
          },
          examples: {
            take: 20, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –ø—Ä–∏–º–µ—Ä–æ–≤
            orderBy: {
              createdAt: 'desc', // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            },
          },
        },
      });
      return fallback as Character;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–µ—Ä–æ–≥–ª–∏—Ñ–µ
    const character = await this.prisma.character.findUnique({
      where: { id: characters[0].id },
      include: {
        definitions: {
          orderBy: { order: 'asc' },
          take: 20, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        },
        examples: {
          take: 20, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –ø—Ä–∏–º–µ—Ä–æ–≤
          orderBy: {
            createdAt: 'desc', // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
          },
        },
      },
    });
    
    if (character) {
      // –ö–µ—à–∏—Ä—É–µ–º —Å–ª–æ–≤–æ –¥–Ω—è –Ω–∞ 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥)
      await this.redisService.cacheWordOfTheDay(character, 86400);
    }
    
    return character as Character;
  }
}

